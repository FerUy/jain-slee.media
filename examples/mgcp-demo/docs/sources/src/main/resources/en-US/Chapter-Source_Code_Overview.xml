<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Example_User_Guide.ent">%BOOK_ENTITIES;]><chapter id="source_code_overview">	<title>Source Code Overview</title>	<para>		The bellow source code is from IVRSbb, it hides SIP related		logic and highlights MGCP specific code. In case if you want to		look at complete source, please get the source code as explained		in Section 2.2.	</para>
	
	    <programlisting>
package org.mobicents.mgcp.demo;

......

public abstract class IVRSbb implements Sbb {

	public final static String ENDPOINT_NAME = "/mobicents/media/IVR/$";

	public final static String JBOSS_BIND_ADDRESS = System.getProperty("jboss.bind.address", "127.0.0.1");

	public final static String WELCOME = "http://" + JBOSS_BIND_ADDRESS + ":8080/mgcpdemo/audio/RQNT-ULAW.wav";

	......

	private SbbContext sbbContext;

	......

	// MGCP
	private JainMgcpProvider mgcpProvider;
	private MgcpActivityContextInterfaceFactory mgcpAcif;

	public static final int MGCP_PEER_PORT = 2427;
	public static final int MGCP_PORT = 2727;

	private Tracer logger;

	/** Creates a new instance of CallSbb */
	public IVRSbb() {
	}

	public void onCallCreated(RequestEvent evt, ActivityContextInterface aci) {<co id="example.discard.co1"/>
		.......
		//SIP Related handling
		.......

		// respond(evt, Response.RINGING);

		CallIdentifier callID = mgcpProvider.getUniqueCallIdentifier();<co id="example.discard.co2"/>
		this.setCallIdentifier(callID.toString());
		EndpointIdentifier endpointID = new EndpointIdentifier(ENDPOINT_NAME, JBOSS_BIND_ADDRESS + ":" + MGCP_PEER_PORT);<co id="example.discard.co3"/>

		CreateConnection createConnection = new CreateConnection(this, callID, endpointID, ConnectionMode.SendRecv);<co id="example.discard.co4"/>

		try {
			String sdp = new String(evt.getRequest().getRawContent());
			createConnection.setRemoteConnectionDescriptor(new ConnectionDescriptor(sdp));<co id="example.discard.co5"/>
		} catch (ConflictingParameterException e) {
			// should never happen
		}

		int txID = mgcpProvider.getUniqueTransactionHandler();<co id="example.discard.co6"/>
		createConnection.setTransactionHandle(txID);

		MgcpConnectionActivity connectionActivity = null;
		try {
			connectionActivity = mgcpProvider.getConnectionActivity(txID, endpointID);<co id="example.discard.co7"/>
			ActivityContextInterface epnAci = mgcpAcif.getActivityContextInterface(connectionActivity);
			epnAci.attach(sbbContext.getSbbLocalObject());
		} catch (FactoryException ex) {
			ex.printStackTrace();
		} catch (NullPointerException ex) {
			ex.printStackTrace();
		} catch (UnrecognizedActivityException ex) {
			ex.printStackTrace();
		}

		mgcpProvider.sendMgcpEvents(new JainMgcpEvent[] { createConnection });<co id="example.discard.co8"/>
	}
	
	...
	....
	
	}	    
	    </programlisting>
	    <calloutlist>
      	<callout arearefs="example.discard.co1">
        <para>
        <classname>IVRSbb</classname> is listening for INVITE SIP RA Event. The Slee Container calls corresponding onCallCreated event handler method.
        </para>
        </callout>
        
      	<callout arearefs="example.discard.co2">      	
        <para>
        New instance of <classname>CallIdentifier</classname> is created as this is new call. Through out the call, <classname>CallIdentifier</classname> will remain the same.
        </para>
        </callout>        
        
      	<callout arearefs="example.discard.co3">
        <para>
                New instance of <classname>EndpointIdentifier</classname> is created. The Endpoint local name is <literal>"/mobicents/media/IVR/$"</literal>. 
                A term represented by a dollar sign ("$") is to be interpreted as, use any available free endpoint. 
                Endpoint domain name is <literal>JBOSS_BIND_ADDRESS + ":" + MGCP_PEER_PORT</literal>. The MGCP Command will be delivered to MGCP Stack listening at 
                JBOSS_BIND_ADDRESS IP Address and MGCP_PEER_PORT port. Make sure that the Mobicents Media Server is bound to same IP address as JBOSS_BIND_ADDRESS and port in mgcp-conf.xml (MGCP Configuration file in Mobicents Media Server) is same as MGCP_PEER_PORT.
                
        </para>
        </callout>        
        
      	<callout arearefs="example.discard.co4">
        <para>
        New instance of <classname>CreateConnection</classname> object is created. This CreateConnection Request when received by Media Gateway, will cause Media Gateway to select any one free IVR Endpoint, 
        create a connection on it and send back <classname>CreateConnectionResponse</classname>. If there is any error while creating connection the returned <classname>CreateConnectionResponse</classname> 
        will carry the corresponding cause in  <classname>ReturnCode</classname>
        </para>
        </callout>        
        
      	<callout arearefs="example.discard.co5">
        <para>
      	Setting the SDP of User Agent. This is not mandatory. If this is set the Connection created on Endpoint on media gateway will 
      	start sending the media (depending on <classname>ConnectionMode</classname>) to User Agent at IP:Port specified in SDP. If
      	this is not set, the Connection can latter be modified by sending  <classname>ModifyConnection</classname> (not shown in this example)        
        </para>
        </callout>        
        
      	<callout arearefs="example.discard.co6">      	
        <para>
        Set a new transaction for this MGCP Request. 
        </para>
        </callout>        
        
      	<callout arearefs="example.discard.co7">
        <para>
        Create a new <classname>MgcpConnectionActivity</classname> for this MGCP Request, attach the SbbLocalObject to this activity to receive  
        <classname>CreateConnectionResponse</classname> event from MGCP RA.
        </para>
        </callout>        
        
      	<callout arearefs="example.discard.co8">
        <para>
        Finally send this <classname>CreateConnection</classname> MGCP Command to Media Gateway.
        </para>
        </callout>        
        </calloutlist><para>
Once the MGCP command reaches Media Gateway, it replies back and MGCP RA will fire corresponding event.
</para>

<programlisting>
	public void onCreateConnectionResponse(CreateConnectionResponse event, ActivityContextInterface aci) {<co id="example.crcxres.co1"/>
		logger.info("Receive CRCX response: " + event.getTransactionHandle());

		......
		....

		ReturnCode status = event.getReturnCode();<co id="example.crcxres.co2"/>

		switch (status.getValue()) {
		case ReturnCode.TRANSACTION_EXECUTED_NORMALLY:

			this.setEndpointName(event.getSpecificEndpointIdentifier().getLocalEndpointName());<co id="example.crcxres.co3"/>
			
			ConnectionIdentifier connectionIdentifier = event.getConnectionIdentifier();<co id="example.crcxres.co4"/>

			this.setConnectionIdentifier(connectionIdentifier.toString());
			String sdp = event.getLocalConnectionDescriptor().toString();<co id="example.crcxres.co5"/>

                        //Send OK to UA with SDP from media gateway
                        .....
			.......

			//Play Announcement
			sendRQNT(WELCOME, false);<co id="example.crcxres.co6"/>
			.....
			......

			break;
		default:
			//CRCX failed at Media Gateway. Take necessary action<co id="example.crcxres.co7"/>
			.....
		}
	}
</programlisting>
	    <calloutlist>
      	<callout arearefs="example.crcxres.co1">
        <para>
        MGCP RA will fire the <classname>CreateConnectionResponse</classname> event once CRCX Response received from Media Gateway.
        </para>
        </callout>
        
      	<callout arearefs="example.crcxres.co2">
        <para>
        <classname>ReturnCode</classname> specifies if Media Gateway has successfully created the connection on Endpoint or not.
        </para>
        	<variablelist>
        	<varlistentry>
        	<term>Return codes are</term>
        	<listitem>
			<para>
			100 and 199 indicate a provisional response 
			</para>
			<para>
			200 and 299 indicate a successful completion 
			</para>
			<para>
			400 and 499 indicate a transient error 
			</para>
			<para>
			500 and 599 indicate a permanent error  
			</para>
			</listitem>
        	</varlistentry>
        	</variablelist>
        </callout>     
        
        <callout arearefs="example.crcxres.co3">
        <para>
        If connection created successfully, <classname>CreateConnectionResponse</classname> will carry the specific  <classname>EndpointIdentifier</classname> 
        indicating the concrete Endpoint selected by media gateway. Next all MGCP Request will be fired on same endpoint till DeleteConnection is requested which represents 
        end of call.
        </para>
        </callout>
        
        <callout arearefs="example.crcxres.co4">
        <para>
        If connection created successfully, <classname>CreateConnectionResponse</classname> will carry the specific  <classname>ConnectionIdentifier</classname> 
        identifying the connection created by media gateway on above Endpoint. The request to apply Signal or detect Event will be for this <classname>ConnectionIdentifier</classname>.
        </para>
        </callout>        
        
        
        <callout arearefs="example.crcxres.co5">
        <para>
        If connection created successfully, <classname>CreateConnectionResponse</classname> will carry the <classname> ConnectionDescriptor</classname> 
        indicating the SDP of above created connection. This SDP can then be sent to UA as OK Response to INVITE received and RTP flow begins between UA and Media Gateway
        </para>
        </callout>   
        
        <callout arearefs="example.crcxres.co6">
        <para>
		Since the RTP connection is established between UA and Media Gateway, <classname>NotificationRequest</classname> can be send to Media Gateway to play an announcement.
        </para>
        </callout>          
        <callout arearefs="example.crcxres.co7">
        <para>
		If creation of connection failed for some reason indicated by <classname>ReturnCode</classname>, necessary action can be taken.
        </para>
        </callout>          
        
        </calloutlist>
       
       
       <para>Let us see how <classname>NotificationRequest</classname> is used to request Media Gateway to play an Announcement</para> 
       <programlisting>
	private void sendRQNT(String mediaPath, boolean createActivity) {
		EndpointIdentifier endpointID = new EndpointIdentifier(this.getEndpointName(), JBOSS_BIND_ADDRESS + ":"
				+ MGCP_PEER_PORT);<co id="example.rqnt.co1"/>

		NotificationRequest notificationRequest = new NotificationRequest(this, endpointID, mgcpProvider
				.getUniqueRequestIdentifier());<co id="example.rqnt.co2"/>
		
		ConnectionIdentifier connectionIdentifier = new ConnectionIdentifier(this.getConnectionIdentifier());<co id="example.rqnt.co3"/>
		
		EventName[] signalRequests = { new EventName(PackageName.Announcement, MgcpEvent.ann.withParm(mediaPath), connectionIdentifier) };
		notificationRequest.setSignalRequests(signalRequests);<co id="example.rqnt.co4"/>

		RequestedAction[] actions = new RequestedAction[] { RequestedAction.NotifyImmediately };

		RequestedEvent[] requestedEvents = {<co id="example.rqnt.co5"/>
				new RequestedEvent(new EventName(PackageName.Announcement, MgcpEvent.oc, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Announcement, MgcpEvent.of, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmf0, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmf1, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmf2, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmf3, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmf4, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmf5, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmf6, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmf7, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmf8, connectionIdentifier), actions),

				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmf9, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmfA, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmfB, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmfC, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmfD, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmfStar, connectionIdentifier), actions),
				new RequestedEvent(new EventName(PackageName.Dtmf, MgcpEvent.dtmfHash, connectionIdentifier), actions) };

		notificationRequest.setRequestedEvents(requestedEvents);
		notificationRequest.setTransactionHandle(mgcpProvider.getUniqueTransactionHandler());

		NotifiedEntity notifiedEntity = new NotifiedEntity(JBOSS_BIND_ADDRESS, JBOSS_BIND_ADDRESS, MGCP_PORT);
		notificationRequest.setNotifiedEntity(notifiedEntity);

		if (createActivity) {<co id="example.rqnt.co6"/>
			MgcpEndpointActivity endpointActivity = null;
			try {
				endpointActivity = mgcpProvider.getEndpointActivity(endpointID);
				ActivityContextInterface epnAci = mgcpAcif.getActivityContextInterface(endpointActivity);
				epnAci.attach(sbbContext.getSbbLocalObject());
			} catch (FactoryException ex) {
				ex.printStackTrace();
			} catch (NullPointerException ex) {
				ex.printStackTrace();
			} catch (UnrecognizedActivityException ex) {
				ex.printStackTrace();
			}
		} // if (createActivity)

		mgcpProvider.sendMgcpEvents(new JainMgcpEvent[] { notificationRequest });<co id="example.rqnt.co7"/>

		logger.info(" NotificationRequest sent");
	}       
       </programlisting>
       	<calloutlist>
      	<callout arearefs="example.rqnt.co1">
        <para>
        The <classname>NotificationRequest</classname> should be fired on same Endpoint where connection is created
        </para>
        </callout>
      	<callout arearefs="example.rqnt.co3">
        <para>
        Create a new <classname>NotificationRequest</classname> Object passing EndpointIdentifier created above and use new RequestIdentifier
        </para>
        </callout>
		<callout arearefs="example.rqnt.co3">
        <para>
        The <classname>NotificationRequest</classname> should be fired on same connection on Endpoint.
        </para>
        </callout>
		<callout arearefs="example.rqnt.co4">
        <para>
        The <classname>NotificationRequest</classname> carries Signal to play an announcement on connection represented by connectionIdentifier
        </para>
        </callout>        
        
		<callout arearefs="example.rqnt.co5">
        <para>
        The <classname>NotificationRequest</classname> carries request to detect DTMF Events and also detect events if Announcement completed successfully or failed. 
        </para>
        </callout>                
        
		<callout arearefs="example.rqnt.co6">
        <para>
		Since none of the Signals/Events are fired/detected on Endpoint, Endpoint Activity is not created. The above Events when detected would be fired on Connection Activity.  
        </para>
        </callout>        
        
		<callout arearefs="example.rqnt.co7">
        <para>
		Finally send the request to Media Gateway.  
        </para>
        </callout>        
       </calloutlist>
       
       <para>
       Once Media Gateway receives the <classname>NotificationRequest</classname>, it will process the Signals / Events and send back <classname> NotificationRequestResponse</classname>
       which carries <classname>ReturnCode</classname> indicating if Signals can be applied or not and Events can be detected or not. 
       </para>
       <programlisting>
	public void onNotificationRequestResponse(NotificationRequestResponse event, ActivityContextInterface aci) {
		logger.info("onNotificationRequestResponse");

		ReturnCode status = event.getReturnCode();

		switch (status.getValue()) {
		case ReturnCode.TRANSACTION_EXECUTED_NORMALLY:
			logger.info("The Announcement should have been started");
			break;
		default:
			ReturnCode rc = event.getReturnCode();
			logger.severe("RQNT failed. Value = " + rc.getValue() + " Comment = " + rc.getComment());

			//Send DLCX to MMS. Send BYE to UA
			break;
		}

	}       
       </programlisting>
       
       <para>
       The Media Gateway will fire the <classname>Notify</classname> command to Application when ever it detects any of the above Events 
       requested by <classname> NotificationRequest</classname>
       </para>
              <programlisting>
	public void onNotifyRequest(Notify event, ActivityContextInterface aci) {
		logger.info("onNotifyRequest");

		 NotifyResponse response = new  NotifyResponse(event.getSource(),
				ReturnCode.Transaction_Executed_Normally);
		response.setTransactionHandle(event.getTransactionHandle());

		mgcpProvider.sendMgcpEvents(new JainMgcpEvent[] { response });<co id="example.ntfy.co1"/>

		EventName[] observedEvents = event.getObservedEvents();<co id="example.ntfy.co2"/>

		for (EventName observedEvent : observedEvents) {
			switch (observedEvent.getEventIdentifier().intValue()) {
			case MgcpEvent.REPORT_ON_COMPLETION:
				logger.info("Announcemnet Completed NTFY received");
				break;
			case MgcpEvent.REPORT_FAILURE:
				logger.info("Announcemnet Failed received");
				// TODO : Send DLCX and Send BYE to UA
				break;
			case MgcpEvent.DTMF_0:
				logger.info("You have pressed 0");
				sendRQNT(DTMF_0, false);
				break;
			case MgcpEvent.DTMF_1:
				logger.info("You have pressed 1");
				sendRQNT(DTMF_1, false);
				break;
			case MgcpEvent.DTMF_2:
				logger.info("You have pressed 2");
				sendRQNT(DTMF_2, false);
				break;
			case MgcpEvent.DTMF_3:
				logger.info("You have pressed 3");
				sendRQNT(DTMF_3, false);
				break;
			case MgcpEvent.DTMF_4:
				logger.info("You have pressed 4");
				sendRQNT(DTMF_4, false);
				break;
			case MgcpEvent.DTMF_5:
				logger.info("You have pressed 5");
				sendRQNT(DTMF_5, false);
				break;
			case MgcpEvent.DTMF_6:
				logger.info("You have pressed 6");
				sendRQNT(DTMF_6, false);
				break;
			case MgcpEvent.DTMF_7:
				logger.info("You have pressed 7");
				sendRQNT(DTMF_7, false);
				break;
			case MgcpEvent.DTMF_8:
				logger.info("You have pressed 8");
				sendRQNT(DTMF_8, false);
				break;
			case MgcpEvent.DTMF_9:
				logger.info("You have pressed 9");
				sendRQNT(DTMF_9, false);
				break;
			case MgcpEvent.DTMF_A:
				logger.info("You have pressed A");
				sendRQNT(A, false);
				break;
			case MgcpEvent.DTMF_B:
				logger.info("You have pressed B");
				sendRQNT(B, false);
				break;
			case MgcpEvent.DTMF_C:
				logger.info("You have pressed C");
				sendRQNT(C, false);
				break;
			case MgcpEvent.DTMF_D:
				logger.info("You have pressed D");
				sendRQNT(D, false);

				break;
			case MgcpEvent.DTMF_STAR:
				logger.info("You have pressed *");
				sendRQNT(STAR, false);

				break;
			case MgcpEvent.DTMF_HASH:
				logger.info("You have pressed C");
				sendRQNT(POUND, false);

				break;
			}
		}
	}              
              </programlisting>
       	<calloutlist>
      	<callout arearefs="example.ntfy.co1">
        <para>
        Send the <classname>NotifyResponse</classname> immediately to avoid Media Gateway sending the <classname>Notify</classname> again on expiration of response Timer.
        </para>
        </callout>
        
      	<callout arearefs="example.ntfy.co2">
        <para>
        The <classname>Notify</classname> command carries list of Events depending on which all occurred at Media Gateway. Iterate through this list and act accordingly.
        In our example we are simply asking Media Gateway to play corresponding audio file for DTMF pressed by user.
        </para>
        </callout>        
        </calloutlist> 
        <para>
        Finally when user hangs-up, we need to delete the connection on Endpoint and free the resources
        </para>  
        <programlisting>
	public void onCallTerminated(RequestEvent evt, ActivityContextInterface aci) {<co id="example.dlcx.co1"/>
		EndpointIdentifier endpointID = new EndpointIdentifier(this.getEndpointName(), JBOSS_BIND_ADDRESS + ":"
				+ MGCP_PEER_PORT);
		DeleteConnection deleteConnection = new DeleteConnection(this, endpointID);

		deleteConnection.setTransactionHandle(mgcpProvider.getUniqueTransactionHandler());
		mgcpProvider.sendMgcpEvents(new JainMgcpEvent[] { deleteConnection });<co id="example.dlcx.co2"/>

		ServerTransaction tx = evt.getServerTransaction();
		Request request = evt.getRequest();

		try {
			Response response = messageFactory.createResponse(Response.OK, request);
			tx.sendResponse(response);
		} catch (Exception e) {
			logger.severe("Error while sending DLCX ", e);
		}
	}        
        </programlisting>
        <calloutlist>
      	<callout arearefs="example.dlcx.co1">
        <para>
        The SIP11 RA fires BYE event, slee container calls onCallTerminated method on SBB
        </para>
        </callout>
      	<callout arearefs="example.dlcx.co2">
        <para>
        New <classname>DeleteConnection</classname> Object is created passing the same Endpoint on which original connection was created. Once Media Gateway receives
        <classname>DeleteConnection</classname> command, it closes the connection and frees Endpoint from all resources allocated.
        </para>
        </callout>        
        </calloutlist></chapter>
        