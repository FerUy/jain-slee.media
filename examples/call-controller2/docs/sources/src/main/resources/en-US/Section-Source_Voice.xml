<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Example_User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="source_voice">
	<title>Voice Mail Service Source</title>
	<para>
		Voice mail service illustrates usage of
		<acronym>MGCP</acronym>
		protocol to control
		<literal>Media Server</literal>.
		It is capable of following:
	</para>
	<itemizedlist>
		<listitem>
			<para>setting up media session</para>
		</listitem>
		<listitem>
			<para>receiving event notification from media server</para>
		</listitem>
		<listitem>
			<para>play audio</para>
		</listitem>
		<listitem>
			<para>record audio</para>
		</listitem>
	</itemizedlist>
	<section id="source_voice_root">
		<title>Service root</title>
		<para>Root class of this service is <literal>org.mobicents.slee.examples.callcontrol.forwarding.VoiceMailSbb</literal> </para>
	</section>
	<section id="source_voice_event_handlers_sip">
		<title><acronym>SIP</acronym> Event handlers</title>
		<para><acronym>SIP</acronym> are more complicated as they more complicated tasks including <acronym>MGCP</acronym> signaling and <acronym>SDP</acronym> negotiation.</para>
		<para><literal>VoiceMailSbb</literal>  defines two handlers for <acronym>SIP</acronym>.</para>
		<!-- Doco: should this be in itemsizedlist rather than in sections -->
		<section id="source_voice_event_handlers_sip_invite">
			<title>INVITE</title>
			<para>INVITE event handler performs following tasks:</para>
			<itemizedlist>
				<listitem>
					<para>check if event has already been processed</para>
				</listitem>
				<listitem>
					<para>determine if messages will be recorded or played</para>
				</listitem>
				<listitem>
					<para>create dialog</para>
				</listitem>
				<listitem>
					<para>determine if target user has enabled voice mail(subscribed), if not, terminate call</para>
				</listitem>
				<listitem>
					<para>extract <acronym>SDP</acronym> from message and send <acronym>MGCP CRCX</acronym> reques. Request is sent with <acronym>SDP</acronym> to <acronym>PR</acronym> endpoint.</para>
				</listitem>
			</itemizedlist>
			<para>Handler is defined as follows:</para>
			<programlisting role="JAVA" language="Java">
	public void onInvite(javax.sip.RequestEvent event,
			VoiceMailSbbActivityContextInterface localAci) {
		Response response;
		log.info("########## VOICE MAIL SBB: INVITE ##########");
		// Request
		Request request = event.getRequest();
		// Setting Request
		this.setInviteRequest(request);

		// Server Transaction
		ServerTransaction st = event.getServerTransaction();

		try {

			if (localAci.getFilteredByAncestor()) {
				log
						.info("########## VOICE MAIL SBB: FILTERED BY ANCESTOR ##########");
				return;
			}

			// if we are calling to vmail this means we want to check our mail
			// box
			// sameUser = true
			boolean sameUser = sameUser(event);
			URI uri;

			if (sameUser) {
				// The user is the caller
				FromHeader fromHeader = (FromHeader) request
						.getHeader(FromHeader.NAME);
				uri = fromHeader.getAddress().getURI();
			} else {
				// The user is the callee - we are calling someone else
				ToHeader toHeader = (ToHeader) request.getHeader(ToHeader.NAME);
				uri = toHeader.getAddress().getURI();
			}
			// In the Profile Table the port is not used
			((SipURI) uri).removePort();

			// Responding to the user
			// To know whether the user has the Voice mail service enabled
			boolean isSubscriber = isSubscriber(uri.toString());

			if (isSubscriber) {

				// Formalities of sip, so we dont get retrans
				// Attaching to SIP Dialog activity
				Dialog dial = getSipFactoryProvider().getNewDialog(
						(Transaction) st);
				ActivityContextInterface dialogAci = sipACIF
						.getActivityContextInterface((DialogActivity) dial);

				// attach this SBB object to the Dialog activity to receive
				// subsequent events on this Dialog
				dialogAci.attach(this.getSbbLocalObject());

				// Notify caller that we're TRYING to reach voice mail. Just a
				// formality, we know we can go further than TRYING at this
				// point
				response = getMessageFactory().createResponse(Response.TRYING,
						request);
				st.sendResponse(response);

				// RINGING. Another formality of the SIP protocol.
				response = getMessageFactory().createResponse(Response.RINGING,
						request);
				st.sendResponse(response);

				String sdp = new String(event.getRequest().getRawContent());

				CallIdentifier callID = this.mgcpProvider
						.getUniqueCallIdentifier();
				// this is not requiered, but to be good MGCP citizen we will
				// obey mgcp call id rule.
				setCallIdentifier(callID);

				EndpointIdentifier endpointID = new EndpointIdentifier(
						PRE_ENDPOINT_NAME, mmsBindAddress + ":"
								+ MGCP_PEER_PORT);
				CreateConnection createConnection = new CreateConnection(this,
						callID, endpointID, ConnectionMode.SendRecv);
				try {
					createConnection
							.setRemoteConnectionDescriptor(new ConnectionDescriptor(
									sdp));
				} catch (ConflictingParameterException e) {
					e.printStackTrace();
				}
				int txID = mgcpProvider.getUniqueTransactionHandler();
				createConnection.setTransactionHandle(txID);

				MgcpConnectionActivity connectionActivity = null;
				try {
					connectionActivity = mgcpProvider.getConnectionActivity(
							txID, endpointID);
					ActivityContextInterface epnAci = mgcpActivityContestInterfaceFactory
							.getActivityContextInterface(connectionActivity);
					epnAci.attach(getSbbContext().getSbbLocalObject());

				} catch (FactoryException ex) {
					ex.printStackTrace();
				} catch (NullPointerException ex) {
					ex.printStackTrace();
				} catch (UnrecognizedActivityException ex) {
					ex.printStackTrace();
				}

				mgcpProvider
						.sendMgcpEvents(new JainMgcpEvent[] { createConnection });
				log
						.info("########## VOICE MAIL AVAILABLE FOR USER: sent PR CRCX request ##########");
			} else {
				// Voice Mail service disabled
				response = getMessageFactory().createResponse(
						Response.TEMPORARILY_UNAVAILABLE, request);
				log.info("########## NO VOICE MAIL AVAILABLE FOR USER: "
						+ uri.toString());
				st.sendResponse(response);
			}

		} catch (TransactionRequiredLocalException e) {
			log.error(e.getMessage(), e);
		} catch (SLEEException e) {
			log.error(e.getMessage(), e);
		} catch (ParseException e) {
			log.error(e.getMessage(), e);
		} catch (SipException e) {
			log.error(e.getMessage(), e);
		} catch (InvalidArgumentException e) {
			log.error(e.getMessage(), e);
		} catch (NullPointerException e) {
			log.error(e.getMessage(), e);
		}
	}
			</programlisting>
		</section>
		<section id="source_voice_event_handlers_sip_bye">
			<title>BYE</title>
			<para>This event handler is different than <literal>INVITE</literal>. It is triggered by event fired as in-Dialog event, that is
			, its different class of events - indicated by different name, please refer to <acronym>SIP</acronym> <literal>Resource Adaptor Guide</literal>.
			<literal>BYE</literal> event handler performs following tasks:</para>
			<itemizedlist>
				<listitem>
					<para>tear down media path</para>
				</listitem>
				<listitem>
					<para>flush media buffer</para>
				</listitem>
				<listitem>
					<para>free service</para>
				</listitem>
			</itemizedlist>
			<para>Handler is defined as follows:</para>
			<programlisting role="JAVA" language="Java">
	public void onByeEvent(RequestEvent event, ActivityContextInterface aci) {
		log.info("########## VOICE MAIL SBB: BYE ##########");
		try {

			releaseState();

			// Sending the OK Response to the BYE Request received.
			byeRequestOkResponse(event);

		} catch (FactoryException e) {
			log.error(e.getMessage(), e);
		} catch (NullPointerException e) {
			log.error(e.getMessage(), e);
		}
	}


			</programlisting>
		</section>
	</section>
	<section id="source_voice_event_handlers_mgcp">
		<title><acronym>MGCP</acronym> Event handlers</title>
		<para>For details on <acronym>MGCP</acronym> protocol please refer to:</para>
		<itemizedlist>
			<listitem>
				<para><ulink url="http://tools.ietf.org/html/rfc3435">RFC3435</ulink> </para>
			</listitem>
			<listitem>
				<para><literal>mgcp-demo</literal> documentation</para>
			</listitem>
			<listitem>
				<para> <acronym>MGCP RA</acronym> documentation</para>
			</listitem>
		</itemizedlist>
		<section id="serouce_voice_event_handlers_mgcp_crcxa">
			<title>Create Connection (CRCX) Response</title>
			<para>This event is received as answer to <acronym>CRCX</acronym> request. <literal>Voice Mail</literal> receives this in two cases:</para>
			<itemizedlist>
				<listitem>
					<para>media server acknowledges creation of connection to <acronym>PR</acronym> endpoint </para>
				</listitem>
				<listitem>
					<para>media server acknowledges creation of connection between <acronym>PR</acronym> and <acronym>IVR</acronym> endpoints </para>
				</listitem>
			</itemizedlist>
			<para>It performs following task:</para>
			<itemizedlist>
				<listitem>
					<para>disconnect UA in case of failure and clear state of media server.</para>
				</listitem>
				<listitem>
					<para>send OK(200) response to UA with <acronym>SDP</acronym> of  <acronym>PR</acronym> endpoint connection please refer to <xref linkend="design_voice"/> for overview of arrangement. </para>
				</listitem>
				<listitem>
					<para>create connection between <acronym>PR</acronym> and <acronym>IVR</acronym> endpoints</para>
				</listitem>
				<listitem>
					<para>start greeting playback if media path is estabilished</para>
				</listitem>
			</itemizedlist>
			<para>Handler is defined as follows:</para>
			<programlisting role="JAVA" language="Java">
public void onCreateConnectionResponse(CreateConnectionResponse event,
		ActivityContextInterface aci) {
	log.info("Receive CRCX response: " + event);

	ReturnCode status = event.getReturnCode();

	switch (status.getValue()) {

	case ReturnCode.TRANSACTION_EXECUTED_NORMALLY:
		log.info("Connection created properly.");
		break;
	default:
		ReturnCode rc = event.getReturnCode();
		log.error("CRCX failed. Value = " + rc.getValue() + " Comment = "
				+ rc.getComment());

		sendServerError("Failed to create connection, code: "
					+ event.getReturnCode(), Response.SERVER_INTERNAL_ERROR);

		return;
	}

	boolean startMailMedia = false;
	if (event.getSecondEndpointIdentifier() == null) {
		// this is response for PR creation
		// we have one connection activity, lets send another crcx

		// send OK with sdp
		DialogActivity da = getDialogActivity();
		ServerTransaction txn = getServerTransaction();
		if (txn == null) {
			log.error("SIP activity lost, close RTP connection");
			releaseState();
			return;
		}

		Request request = txn.getRequest();

		ContentTypeHeader contentType = null;
		try {
			contentType = getHeaderFactory().createContentTypeHeader("application", "sdp");
		} catch (ParseException ex) {
		}

		String localAddress = getSipFactoryProvider().getListeningPoints()[0].getIPAddress();
		int localPort = getSipFactoryProvider().getListeningPoints()[0].getPort();

		javax.sip.address.Address contactAddress = null;
		try {
			contactAddress = getAddressFactory().createAddress(
				"sip:" + localAddress + ":" + localPort);
		} catch (ParseException ex) {
			log.error(ex.getMessage(), ex);
		}
		ContactHeader contact = getHeaderFactory()
			.createContactHeader(contactAddress);

		Response response = null;
		try {
			response = getMessageFactory().createResponse(
				Response.OK, request, contentType, 
				event.getLocalConnectionDescriptor().toString().getBytes());
		} catch (ParseException ex) {
		}

		response.setHeader(contact);
		try {
			txn.sendResponse(response);
		} catch (InvalidArgumentException ex) {
			log.error(ex.getMessage(), ex);
		} catch (SipException ex) {
			log.error(ex.getMessage(), ex);
		}
		EndpointIdentifier endpointID = new EndpointIdentifier(
				IVR_ENDPOINT_NAME, mmsBindAddress + ":" + MGCP_PEER_PORT);
		CreateConnection createConnection = new CreateConnection(this,
				getCallIdentifier(), endpointID, ConnectionMode.SendRecv);

		int txID = mgcpProvider.getUniqueTransactionHandler();
		createConnection.setTransactionHandle(txID);

		// now set other end
		try {
			createConnection.setSecondEndpointIdentifier(event
					.getSpecificEndpointIdentifier());
		} catch (ConflictingParameterException e) {
			e.printStackTrace();
		}

		MgcpConnectionActivity connectionActivity = null;
		try {
			connectionActivity = mgcpProvider.getConnectionActivity(txID,
					endpointID);
			ActivityContextInterface epnAci = mgcpActivityContestInterfaceFactory
					.getActivityContextInterface(connectionActivity);
			epnAci.attach(getSbbContext().getSbbLocalObject());
			// epnAci.attach(getParentCmp());
		} catch (FactoryException ex) {
			ex.printStackTrace();
		} catch (NullPointerException ex) {
			ex.printStackTrace();
		} catch (UnrecognizedActivityException ex) {
			ex.printStackTrace();
		}

		mgcpProvider
				.sendMgcpEvents(new JainMgcpEvent[] { createConnection });

	} else {
		// this is last
		startMailMedia = true;

	}

	EndpointIdentifier eid = event.getSpecificEndpointIdentifier();
	log.info("Creating endpoint activity on: " + eid);
	MgcpEndpointActivity eActivity = mgcpProvider.getEndpointActivity(eid);
	ActivityContextInterface eAci = mgcpActivityContestInterfaceFactory
			.getActivityContextInterface(eActivity);
	eAci.attach(this.getSbbContext().getSbbLocalObject());

	if (startMailMedia) {
		startMailMedia();
	}

}
			</programlisting>
		</section>
		<section id="serouce_voice_event_handlers_mgcp_notification_req_resp">
			<title>Notification Request Response</title>
			<para>This event is received as response to notification request. It indicates result of signal request sent to media server.</para>
			<para>It disconnect <acronym>UA</acronym> in case of failure.</para>
			<para>Handler is defined as follows:</para>
			<programlisting role="JAVA" language="Java">
public void onNotificationRequestResponse(
	NotificationRequestResponse event, ActivityContextInterface aci) {


	ReturnCode status = event.getReturnCode();

	switch (status.getValue()) {
	case ReturnCode.TRANSACTION_EXECUTED_NORMALLY:
		log.info("########## VOICE MAIL SBB: RQNT executed properly. TXID: "+event.getTransactionHandle()+" ##########");
		break;
	default:
		ReturnCode rc = event.getReturnCode();
		log.info("########## VOICE MAIL SBB: RQNT failed, terminating call. TXID: "+event.getTransactionHandle()+" ##########");
		sendByeRequest();
		
		break;
	}

}
			</programlisting>
		</section>
			<section id="serouce_voice_event_handlers_mgcp_ntf_req">
			<title>Notify Request</title>
			<para>This event is received as result of requested notification - <literal>Voice Mail</literal> requests to be notified on certain conditions.</para>
			<para>Depending on observed event type, handler performs different action.
			</para>
			<para>Handler is defined as follows:</para>
			<programlisting role="JAVA" language="Java">
public void onNotifyRequest(Notify event, ActivityContextInterface aci) {


	NotifyResponse response = new NotifyResponse(event.getSource(),
			ReturnCode.Transaction_Executed_Normally);
	response.setTransactionHandle(event.getTransactionHandle());
	log.info("########## VOICE MAIL SBB: Sending Notify response["+response+"] to ["+event+"]["+event.getTransactionHandle()+"] ["+response.getTransactionHandle()+"]##########");
		
	mgcpProvider.sendMgcpEvents(new JainMgcpEvent[] { response });

		
	EventName[] observedEvents = event.getObservedEvents();

	for (EventName observedEvent : observedEvents) {
		switch (observedEvent.getEventIdentifier().intValue()) {
		case MgcpEvent.REPORT_ON_COMPLETION:
			log.info("########## VOICE MAIL SBB: Signal completed, event identifier["+observedEvent.getEventIdentifier()+"] ##########");
			
			if(observedEvent.getEventIdentifier().toString().equals("oc"))
			{
				onAnnouncementComplete();
			}
				
			break;
		case MgcpEvent.REPORT_FAILURE:
			log.info("########## VOICE MAIL SBB: Signal failed, event identifier["+observedEvent.getEventIdentifier()+"] ##########");
			//releaseState();
			sendByeRequest();
			break;
		
		case MgcpEvent.DTMF_1:
			this.checkDtmfDigit("1");
			break;
		case MgcpEvent.DTMF_7:
			this.checkDtmfDigit("7");
			break;
		case MgcpEvent.DTMF_9:
			this.checkDtmfDigit("9");
			break;
			
		default:
			log.info("########## VOICE MAIL SBB: Notify on unknown event, event identifier["+observedEvent.getEventIdentifier()+"]identifier["+observedEvent.getEventIdentifier().intValue()+"] ##########");
			break;
		}
			
	}

}
			</programlisting>
		</section>
	</section>
	<section id="serouce_voice_event_mgcp_requests">
		<title><acronym>MGCP</acronym> signals</title>
		<para><literal>VoiceMailSbb</literal> sends request to media server in order to trigger media play or record. It also requests to be notified on certain events:</para>
		<itemizedlist>
			<listitem>
				<para>announcement completed</para>
			</listitem>
			<listitem>
				<para><acronym>DTMF</acronym> digit has been pressed</para>
			</listitem>
		</itemizedlist>
		<para>It sends <acronym>MGCP</acronym> <literal>Notification Request</literal> with signals(play or record) to be applied and events to be detected.
		</para>
		<para>Notification Request is built as follows:
		</para>
		<programlisting language="Java" role="JAVA">
	public void sendRQNT(String audioFileUrl, boolean record, boolean detectDtmf) {
		MgcpEndpointActivity endpointActivity = getEndpointActivity("IVR");

		if (endpointActivity == null) {
			// bad practice
			throw new RuntimeException("There is no IVR endpoint activity");
		}
		MgcpConnectionActivity connectionActivity = getConnectionActivity(endpointActivity
				.getEndpointIdentifier());
		if (connectionActivity == null) {
			// bad practice
			throw new RuntimeException(
					"There is no IVR connection activity");
		}
		EndpointIdentifier endpointID = endpointActivity
				.getEndpointIdentifier();
		ConnectionIdentifier connectionID = new ConnectionIdentifier(
				connectionActivity.getConnectionIdentifier());
		NotificationRequest notificationRequest = new NotificationRequest(this,
				endpointID, mgcpProvider.getUniqueRequestIdentifier());
		RequestedAction[] actions = new RequestedAction[] { RequestedAction.NotifyImmediately };
		
		
		if (audioFileUrl != null) {
			EventName[] signalRequests = null;
			if (!record) {

				signalRequests = new EventName[] { new EventName(
						PackageName.Announcement, MgcpEvent.ann
								.withParm(audioFileUrl),connectionID) };
			} else {
				signalRequests = new EventName[] { new EventName(AUPackage.AU,
						AUMgcpEvent.aupr.withParm(audioFileUrl), connectionID) };
			}

			notificationRequest.setSignalRequests(signalRequests);
			
			//add notification, in case dtmf part is not included
			RequestedEvent[] requestedEvents = {
					new RequestedEvent(new EventName(PackageName.Announcement
						, MgcpEvent.oc,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Announcemen
						t, MgcpEvent.of,connectionID), actions),
					 };

			notificationRequest.setRequestedEvents(requestedEvents);

		}
		
		if (detectDtmf) {
			
			
			

			// This has to be present, since MGCP states that new RQNT erases
			// previous set.
			RequestedEvent[] requestedEvents = {
					new RequestedEvent(new EventName(PackageName.Announcement
						, MgcpEvent.oc,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Announcement
						, MgcpEvent.of,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmf0,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmf1,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmf2,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmf3,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmf4,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmf5,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmf6,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmf7,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmf8,connectionID), actions),

					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmf9,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmfA,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmfB,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmfC,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmfD,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmfStar,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf,
							MgcpEvent.dtmfHash,connectionID), actions) };

			notificationRequest.setRequestedEvents(requestedEvents);
		}
		notificationRequest.setTransactionHandle(mgcpProvider
				.getUniqueTransactionHandler());

		NotifiedEntity notifiedEntity = new NotifiedEntity(JBOSS_BIND_ADDRESS,
				JBOSS_BIND_ADDRESS, MGCP_PORT);
		notificationRequest.setNotifiedEntity(notifiedEntity);

		// we can send empty RQNT, that is clean all req.
		mgcpProvider
				.sendMgcpEvents(new JainMgcpEvent[] { notificationRequest });

		log.info(" NotificationRequest sent: \n" + notificationRequest);
	}
		  </programlisting>
	</section>
	<section id="source_voice_profile">
		<title>Voice Mail profile access</title>
		<para>Voice Mail <acronym>SBB</acronym> accesses examples profile in order to determine if callee has subscription to voice mail service. 
		</para>
		<para>Its done in following way:</para>
		<programlisting role="JAVA" language="Java">
	private boolean isSubscriber(String sipAddress) {
		boolean state = false;
		CallControlProfileCMP profile = lookup(new Address(AddressPlan.SIP,
				sipAddress));

		if (profile != null) {
			state = profile.getVoicemailState();
		}

		return state;
	}

		</programlisting>
	</section>
	<section id="source_voice_descriptor">
		<title>Voice Mail <acronym>SBB</acronym> descriptor</title>
		<para>Descriptor contains following definitions:</para>
		<itemizedlist>
			<listitem>
				<para>sbb ID</para>
			</listitem>
			<listitem>
				<para>profile reference by profile ID</para>
			</listitem>
			<listitem>
				<para>sbb abstract class</para>
			</listitem>
			<listitem>
				<para>cmp fields definition</para>
			</listitem>
			<listitem>
				<para>custom <acronym>ACI</acronym> </para>
			</listitem>
			<listitem>
				<para><acronym>ACI</acronym> variable alias </para>
			</listitem>
			<listitem>
				<para>event handler for transactional INVITE</para>
			</listitem>
			<listitem>
				<para>event handler for in-Dialog BYE</para>
			</listitem>
			<listitem>
				<para>event handlers for <acronym>MGCP</acronym> events </para>
			</listitem>
			<listitem>
				<para><acronym>SBB</acronym> environment entries</para>
			</listitem>
			<listitem>
				<para>resource adaptor bindings</para>
			</listitem>
		</itemizedlist>
		<programlisting language="XML" role="XML"><![CDATA[
	 <sbb>
		<description />
		<sbb-name>VoiceMailSbb</sbb-name>
		<sbb-vendor>org.mobicents</sbb-vendor>
		<sbb-version>0.1</sbb-version>

		<profile-spec-ref>
			<profile-spec-name>CallControlProfileCMP</profile-spec-name>
			<profile-spec-vendor>org.mobicents</profile-spec-vendor>
			<profile-spec-version>0.1</profile-spec-version>
			<profile-spec-alias>CallControlProfile</profile-spec-alias>
		</profile-spec-ref>
		<sbb-classes>
			<sbb-abstract-class>
				<sbb-abstract-class-name>
					org.mobicents.slee.examples.callcontrol.voicemail.VoiceMailSbb
				</sbb-abstract-class-name>
				<cmp-field>
					<cmp-field-name>inviteRequest</cmp-field-name>
				</cmp-field>
				<cmp-field>
					<cmp-field-name>callIdentifier</cmp-field-name>
				</cmp-field>
				<cmp-field>
					<cmp-field-name>sameUser</cmp-field-name>
				</cmp-field>
			</sbb-abstract-class>
			<sbb-activity-context-interface>
				<sbb-activity-context-interface-name>
					org.mobicents.slee.examples.callcontrol.voicemail.VoiceMailSbbActivityContextInterface
				</sbb-activity-context-interface-name>
			</sbb-activity-context-interface>
		</sbb-classes>

		<event event-direction="Receive" initial-event="True">
			<event-name>Invite</event-name>
			<event-type-ref>
				<event-type-name>javax.sip.message.Request.INVITE</event-type-name>
				<event-type-vendor>net.java.slee</event-type-vendor>
				<event-type-version>1.2</event-type-version>
			</event-type-ref>
			<initial-event-selector-method-name>
				callIDSelect
			</initial-event-selector-method-name>
		</event>

		<event event-direction="Receive" initial-event="False">
			<event-name>ByeEvent</event-name>
			<event-type-ref>
				<event-type-name>javax.sip.Dialog.BYE</event-type-name>
				<event-type-vendor>net.java.slee</event-type-vendor>
				<event-type-version>1.2</event-type-version>
			</event-type-ref>
		</event>
		<!-- MGCP events  -->
		<event event-direction="Receive" initial-event="False">
			<event-name>NotificationRequestResponse</event-name>
			<event-type-ref>
				<event-type-name>
					net.java.slee.resource.mgcp.NOTIFICATION_REQUEST_RESPONSE
				</event-type-name>
				<event-type-vendor>net.java</event-type-vendor>
				<event-type-version>1.0</event-type-version>
			</event-type-ref>
		</event>

		<event event-direction="Receive" initial-event="False">
			<event-name>NotifyRequest</event-name>
			<event-type-ref>
				<event-type-name>
					net.java.slee.resource.mgcp.NOTIFY
				</event-type-name>
				<event-type-vendor>net.java</event-type-vendor>
				<event-type-version>1.0</event-type-version>
			</event-type-ref>
		</event>
		<event event-direction="Receive" initial-event="False">
			<event-name>CreateConnectionResponse</event-name>
			<event-type-ref>
				<event-type-name>
					net.java.slee.resource.mgcp.CREATE_CONNECTION_RESPONSE
				</event-type-name>
				<event-type-vendor>net.java</event-type-vendor>
				<event-type-version>1.0</event-type-version>
			</event-type-ref>
		</event>


		<event event-direction="Receive" initial-event="False">
			<event-name>ActivityEndEvent</event-name>
			<event-type-ref>
				<event-type-name>javax.slee.ActivityEndEvent</event-type-name>
				<event-type-vendor>javax.slee</event-type-vendor>
				<event-type-version>1.0</event-type-version>
			</event-type-ref>
		</event>

		<activity-context-attribute-alias>
			<attribute-alias-name>
				inviteFilteredByCallForwarding
			</attribute-alias-name>
			<sbb-activity-context-attribute-name>
				filteredByAncestor
			</sbb-activity-context-attribute-name>
		</activity-context-attribute-alias>
		<env-entry>
			<description>
				This is the path where the recorded files will reside.
				it is part of record/announce path. Full path is comined as follows:
				${MOBICENTS_SLEE_EXAMPLE_CC2_RECORDINGS_HOME}/${filesRoute}.
			</description>
			<env-entry-name>filesRoute</env-entry-name>
			<env-entry-type>java.lang.String</env-entry-type>
			<env-entry-value>${files.route}</env-entry-value>
		</env-entry>
		<env-entry>
			<description>This is the IP address of media server 
			 to which MGCP requests are sent</description>
			<env-entry-name>server.address</env-entry-name>
			<env-entry-type>java.lang.String</env-entry-type>
			<env-entry-value>${server.address}</env-entry-value>
		</env-entry>
		<resource-adaptor-type-binding>
			<resource-adaptor-type-ref>
				<resource-adaptor-type-name>
					JAIN SIP
				</resource-adaptor-type-name>
				<resource-adaptor-type-vendor>
					javax.sip
				</resource-adaptor-type-vendor>
				<resource-adaptor-type-version>
					1.2
				</resource-adaptor-type-version>
			</resource-adaptor-type-ref>
			<activity-context-interface-factory-name>
				slee/resources/jainsip/1.2/acifactory
			</activity-context-interface-factory-name>
			<resource-adaptor-entity-binding>
				<resource-adaptor-object-name>
					slee/resources/jainsip/1.2/provider
				</resource-adaptor-object-name>
				<resource-adaptor-entity-link>
					SipRA
				</resource-adaptor-entity-link>
			</resource-adaptor-entity-binding>
		</resource-adaptor-type-binding>
		<resource-adaptor-type-binding>
			<resource-adaptor-type-ref>
				<resource-adaptor-type-name>
					jain-mgcp
				</resource-adaptor-type-name>
				<resource-adaptor-type-vendor>
					net.java
				</resource-adaptor-type-vendor>
				<resource-adaptor-type-version>
					2.0
				</resource-adaptor-type-version>
			</resource-adaptor-type-ref>
			<activity-context-interface-factory-name>
				slee/resources/jainmgcp/2.0/acifactory
			</activity-context-interface-factory-name>
			<resource-adaptor-entity-binding>
				<resource-adaptor-object-name>
					slee/resources/jainmgcp/2.0/provider
				</resource-adaptor-object-name>
				<resource-adaptor-entity-link>
					MGCPRA
				</resource-adaptor-entity-link>
			</resource-adaptor-entity-binding>
		</resource-adaptor-type-binding>
	</sbb>
		]]>
		</programlisting>
	</section>
</section>	