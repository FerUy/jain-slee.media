<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Example_User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="design_aliasing">
	<title>ACI variable aliasing and service composition</title>
	<para>Call control services act independently from each other. New services can be inserted into chain without modifying source code of existing pieces.</para>
	<para>Chain of services is built with service priority feature of <acronym>JSLEE</acronym>:</para>
	<mediaobject>
		<imageobject>
			<imagedata width="300px" align="center"
			fileref="images/cc2_design_aliasing1.png" format="PNG" />
		</imageobject>
		<caption>
			<para>&THIS.EXAMPLE;
				Message routing
			</para>
		</caption>
	</mediaobject>
	<para>Service priority determines order by which services are chosen to receive the same event. However <acronym>JLSEE</acronym> 
	services are independent entities, that is, each has separate state associated with incoming message. To indicate that event has been consumed and must not be processed anymore
	services need to share information. This is done with <acronym>ACI</acronym> variable aliasing. It allows to share data stored in <acronym>ACI</acronym> variable</para>
	<para>Aliasing scheme used by this example look as follows:</para>		
	<mediaobject>
		<imageobject>
			<imagedata width="300px" align="center"
			fileref="images/cc2_design_aliasing2.png" format="PNG" />
		</imageobject>
		<caption>
			<para>&THIS.EXAMPLE;
				Aliasing overview
			</para>
		</caption>
	</mediaobject>
	<important><para>Aliased <acronym>ACI</acronym> variables must be of same, serializable type. However alias name must be distinct</para></important>
	<note><para>There is no limitation on how many  variables and <acronym>ACI</acronym>s pairs can be aliased, ie. three <acronym>ACI</acronym> can share the same variable.</para> </note>
	<para>Aliases are created on custom <acronym>ACI</acronym> variables. Custom <acronym>ACI</acronym> and aliases are defined in sbb-jar.xml as follow:</para>
	<programlisting language="XML" role="XML"><![CDATA[
    <sbb>
		<description />
		<sbb-name>CallBlockingSbb</sbb-name>
		<sbb-vendor>org.mobicents</sbb-vendor>
		<sbb-version>0.1</sbb-version>

		
		
		<sbb-classes>
			...
			<sbb-activity-context-interface>
				<sbb-activity-context-interface-name>
					org.mobicents.slee.examples.callcontrol.blocking.CallBlockingSbbActivityContextInterface
				</sbb-activity-context-interface-name>
			</sbb-activity-context-interface>
		</sbb-classes>
		 
		 ....
		 
		<activity-context-attribute-alias>
			<attribute-alias-name>inviteFilteredByCallBlocking</attribute-alias-name>
			<sbb-activity-context-attribute-name>filteredByMe</sbb-activity-context-attribute-name>
		</activity-context-attribute-alias>
		
	</sbb>
    <sbb>
		<description />
		<sbb-name>CallForwardingSbb</sbb-name>
		<sbb-vendor>org.mobicents</sbb-vendor>
		<sbb-version>0.1</sbb-version>

		
		<sbb-classes>
			<sbb-abstract-class>
				...
			<sbb-activity-context-interface>
				<sbb-activity-context-interface-name>
					org.mobicents.slee.examples.callcontrol.forwarding.CallForwardingSbbActivityContextInterface
				</sbb-activity-context-interface-name>
			</sbb-activity-context-interface>
		</sbb-classes>
		
		
		<activity-context-attribute-alias>
			<attribute-alias-name>inviteFilteredByCallBlocking</attribute-alias-name>
			<sbb-activity-context-attribute-name>filteredByAncestor</sbb-activity-context-attribute-name>
		</activity-context-attribute-alias>
		<activity-context-attribute-alias>
			<attribute-alias-name>inviteFilteredByCallForwarding</attribute-alias-name>
			<sbb-activity-context-attribute-name>filteredByMe</sbb-activity-context-attribute-name>
		</activity-context-attribute-alias>
		
	</sbb>
		]]>
		</programlisting>
	    <para>Source definition of <acronym>ACI</acronym> and variable accessors look as follows: </para>
	    <programlisting language="Java" role="JAVA">
public interface CallBlockingSbbActivityContextInterface 
	extends javax.slee.ActivityContextInterface {
	public void setFilteredByMe(boolean val);
	public boolean getFilteredByMe();
}
	    </programlisting>
	    <programlisting language="Java" role="JAVA">
public interface CallForwardingSbbActivityContextInterface 
	extends javax.slee.ActivityContextInterface {
	public boolean getFilteredByAncestor();
	public void setFilteredByMe(boolean val);
	public boolean getFilteredByMe();
}
	    </programlisting>

	    
</section>	