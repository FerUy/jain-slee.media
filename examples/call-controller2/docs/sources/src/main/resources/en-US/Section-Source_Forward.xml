<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Example_User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="source_forward">
	<title>Forwarding Service Source</title>
	<para>Forwarding service is simple illustration of call forwarding logic. </para>
	<para>
		It processes incoming
		<acronym>SIP</acronym>
		<literal>INVITE</literal>
		request and based on callee availability permits call to proceed or redirects to backup address if it exists.
		Its a bit more complicated than <xref linkend="source_block"/> service as it:
	</para>
	<itemizedlist>
		<listitem>
			<para>uses location service to determine availability of user</para>
		</listitem>
		<listitem>
			<para>uses proxy service to rely messages to proper target</para>
		</listitem>
	</itemizedlist>
	<section id="source_forward_root">
		<title>Service root</title>
		<para>Root class of this service is <literal>org.mobicents.slee.examples.callcontrol.forwarding.CallForwardingSbb</literal> </para>
	</section>
	<section id="source_forward_event">
		<title>Events handlers</title>
		<!-- what about ack,cancel, bye event handlers, those seem to be not required -->
		<para> <literal>CallForwardingSbb</literal> performs all its tasks in <literal>INVITE</literal> event handler. That is:</para>
		<itemizedlist>
			<listitem>
				<para>check if message has been already processed and possibly mark it as processed for services lower in chain</para>
			</listitem>
			<listitem>
				<para>extract user <acronym>AOR</acronym> and determine if user is online, if so use proxy service to deliver request</para>
			</listitem>
			<listitem>
				<para>if user is not online, attempt forward</para>
			</listitem>
		</itemizedlist>
		<para>Event handler code look as follows:</para>
		<programlisting role="JAVA" language="Java">
	public void onInvite(javax.sip.RequestEvent event
		, CallForwardingSbbActivityContextInterface localAci) {
		Request request;

		try {
			localAci.detach(this.getSbbLocalObject());

			if (localAci.getFilteredByAncestor()) {
				log.info("########## CALL FORWARDING SBB: FILTERED BY ANCESTOR ##########");
				// Next in chain has to know that someone is looking after
				// message
				localAci.setFilteredByMe(true);
				// If it was not set, every change in the chain of services will
				// extort source change in service lower in chain...
				return;
			}

			request = event.getRequest();
			// ToHeader toHeader = (ToHeader) request.getHeader(ToHeader.NAME);
			// URI toURI = toHeader.getAddress().getURI();
			URI toURI = event.getRequest().getRequestURI();
			URI contactURI = isUserAvailable(toURI);
			if (contactURI != null) {
				// USER IS AVAILABLE
				localAci.setFilteredByMe(true);
				log.info("########## User " + toURI + " is available with contact " + contactURI);

				// Create proxy child SBB
				ChildRelation ProxyRelation = getJainSipProxySbb();
				SbbLocalObject ProxyChild = ProxyRelation.create();
				// Attach ProxyChild to the activity
				// Event router will pass this event to child SBB,
				// which in this case is the Proxy SBB. It will in turn proxy
				// the request to the callee.
				localAci.attach(ProxyChild);

				return;
			} else {
				log.info("########## User " + toURI + " is not available, not forwarding");
			}
		} catch (SipSendErrorResponseException e) {
			log.error(e.getMessage(), e);
		} catch (CreateException e) {
			log.error(e.getMessage(), e);
		}

		// IF WE GOT HERE IT MEANS THAT USER IS NOT AVAILABLE AND SBB HIGHER IN
		// CHAIN DID NOT FILTER INVITE.
		// WE HAVE TO FIND NEW ADDRESS... OR LEAVE INVITE TO BE PROCESSED BY
		// NEXT SBB IN CHAIN.
		Address add = forwardCall(event, localAci);

		if (add != null) {
			// INVITE WAS FORWARDED
			// let the next service in the chain know that the event was
			// processed here.
			localAci.setFilteredByMe(true);
		}

		// LET NEXT CHAINED SBB TAKE CARE OF INVITE.
		return;
	}
		</programlisting>
	</section>
	<section id="source_forward_children">
		<title>User status check</title>
		<para><literal>CallForwardingSbb</literal> depends on location service to check if user is online. Example checks entries in <literal>registrar</literal> for callees <acronym>AOR</acronym>.
		Registrar stores bindinings in form of mapping: AOR - {ContactAddress-BindingData,...}
		</para>
		<para>
		Registrar entries are inspected in following way:
		  </para>
		<programlisting role="JAVA" language="Java">
	private URI isUserAvailable(URI uri) throws SipSendErrorResponseException {
		String addressOfRecord = uri.toString();
		URI target = null;
		Map bindings = null;

		try {
			bindings = getLocationSbb().getBindings(addressOfRecord);

		} catch (LocationServiceException e) {
			log.error(e.getMessage(), e);
		} catch (TransactionRequiredLocalException e) {
			log.error(e.getMessage(), e);
		} catch (SLEEException e) {
			log.error(e.getMessage(), e);
		} catch (CreateException e) {
			log.error(e.getMessage(), e);
		}

		if (bindings != null &amp; !bindings.isEmpty()) {
			Iterator it = bindings.values().iterator();

			while (it.hasNext()) {
				RegistrationBinding binding = (RegistrationBinding) it.next();
				log.info("########## BINDINGS: " + binding);
				ContactHeader header = null;
				try {
					header = getHeaderFactory().createContactHeader(
						getAddressFactory().createAddress(binding.getContactAddress()));
				} catch (ParseException e) {
					log.error(e.getMessage(), e);
				}
				log.info("########## CONTACT HEADER: " + header);

				if (header == null) { // entry expired
					continue; // see if there are any more contacts...
				}

				Address na = header.getAddress();
				log.info("isUserAvailable Address: " + na);
				target = na.getURI();
				break;
			}

			if (target == null) {
				log.error("findLocalTarget: No contacts for " + addressOfRecord + " found.");
				throw new SipSendErrorResponseException("User temporarily unavailable",
						Response.TEMPORARILY_UNAVAILABLE);
			}
		}

		return target;
	}
		</programlisting>
	</section>
	<section id="source_forward_forward">
		<title>Call forwarding</title>
		<para>Call is beeing forwarded in case user is not logged in - that is <literal>registrar</literal> does not have binding for user <acronym>AOR</acronym>.
		 </para>
		 <para>Forward operation is performed by means of <acronym>SIP</acronym> <literal>3XX</literal> response class. Example sends response with code 302 and backup address as contact.
		 It is done as follows:
		    </para>	
		    <programlisting role="JAVA" language="Java">
protected Address forwardCall(javax.sip.RequestEvent event, ActivityContextInterface ac) {
	Address toAddress = null;
	Request request = event.getRequest();
	try {
		// Checking if the called user has any backup address
		ToHeader toHeader = (ToHeader) request.getHeader(ToHeader.NAME);
		String toURI = toHeader.getAddress().getURI().toString();
		Address backupAddress = getBackupAddress(toURI);
		
		if (backupAddress != null) {
			// Checking whether the called user has any backup address.
			toAddress = getAddressFactory().createAddress(backupAddress.toString());
			// Notifying the caller that the call has to be redirected
			ServerTransaction st = (ServerTransaction) ac.getActivity();
			ContactHeader contactHeader = getHeaderFactory()
				.createContactHeader(toAddress);
			Response response = getMessageFactory().createResponse(
				Response.MOVED_TEMPORARILY, request);
			response.setHeader(contactHeader);
			st.sendResponse(response);
			log.info("########## REQUEST FORWARDED: " + contactHeader.toString());
			// The Request-URI of the new request uses the value
			// of the Contact header field in the response
		}
	} catch (ParseException e) {
		log.error(e.getMessage(), e);
	} catch (TransactionRequiredLocalException e) {
		log.error(e.getMessage(), e);
	} catch (SLEEException e) {
		log.error(e.getMessage(), e);
	} catch (SipException e) {
		log.error(e.getMessage(), e);
	} catch (InvalidArgumentException e) {
		log.error(e.getMessage(), e);
	}
	return toAddress;
}
		    </programlisting>
	</section>
	<section id="source_forward_profile">
		<title>User profile access</title>
		<para>Call Forwarding <acronym>SBB</acronym> accesses examples profile in order to determine if callee has defined backup address. Its done in following way:</para>
		<programlisting role="JAVA" language="Java">
private Address getBackupAddress(String sipAddress) {
	Address backupAddress = null;
	CallControlProfileCMP profile = this.lookup(
		new javax.slee.Address(AddressPlan.SIP, sipAddress));
		
		if (profile != null) {
			javax.slee.Address address = profile.getBackupAddress();
		
			if (address != null) {
				try {
				backupAddress = getAddressFactory()
					.createAddress(address.getAddressString());
				} catch (ParseException e) {
				log.error(e.getMessage(), e);
			}
		}
	}

	return backupAddress;
}

		</programlisting>
	
	</section>
	<section id="source_forward_descriptor">
		<title>Call Forwarding <acronym>SBB</acronym> descriptor</title>
		<para>Descriptor contains following definitions:</para>
		<itemizedlist>
			<listitem>
				<para>sbb ID</para>
			</listitem>
			<listitem>
				<para>profile reference by profile ID</para>
			</listitem>
			<listitem>
				<para>sbb abstract class</para>
			</listitem>
			<listitem>
				<para>child relation methods definition </para>
			</listitem>
			<listitem>
				<para>custom <acronym>ACI</acronym> </para>
			</listitem>
			<listitem>
				<para><acronym>ACI</acronym> variable alias </para>
			</listitem>
			<listitem>
				<para>event handler with initial event selector</para>
			</listitem>
			<listitem>
				<para>resource adaptor binding</para>
			</listitem>
		</itemizedlist>
		<!-- Dev: document this: address-profile-spec-alias-ref -->
		<programlisting language="XML" role="XML"><![CDATA[
	<sbb>
		<description />
		<sbb-name>CallForwardingSbb</sbb-name>
		<sbb-vendor>org.mobicents</sbb-vendor>
		<sbb-version>0.1</sbb-version>

		<sbb-ref>
			<sbb-name>ProxySbb</sbb-name>
			<sbb-vendor>mobicents</sbb-vendor>
			<sbb-version>1.1</sbb-version>
			<sbb-alias>JainSipProxySbb</sbb-alias>
		</sbb-ref>
		<sbb-ref>
			<sbb-name>LocationSbb</sbb-name>
			<sbb-vendor>org.mobicents</sbb-vendor>
			<sbb-version>1.2</sbb-version>
			<sbb-alias>LocationSbb</sbb-alias>
		</sbb-ref>
		<profile-spec-ref>
			<profile-spec-name>CallControlProfileCMP</profile-spec-name>
			<profile-spec-vendor>org.mobicents</profile-spec-vendor>
			<profile-spec-version>0.1</profile-spec-version>
			<profile-spec-alias>CallControlProfile</profile-spec-alias>
		</profile-spec-ref>
		
		<sbb-classes>
			<sbb-abstract-class>
				<sbb-abstract-class-name>
					org.mobicents.slee.examples.callcontrol.forwarding.CallForwardingSbb
				</sbb-abstract-class-name>

				<cmp-field>
					<cmp-field-name>locationSbbCMP</cmp-field-name>
				</cmp-field>

				<get-child-relation-method>
					<sbb-alias-ref>JainSipProxySbb</sbb-alias-ref>
					<get-child-relation-method-name>
						getJainSipProxySbb
					</get-child-relation-method-name>
					<default-priority>0</default-priority>
				</get-child-relation-method>
				<get-child-relation-method>
					<sbb-alias-ref>LocationSbb</sbb-alias-ref>
					<get-child-relation-method-name>
						getLocationSbbChildRelation
					</get-child-relation-method-name>
					<default-priority>0</default-priority>
				</get-child-relation-method>
			</sbb-abstract-class>
			<sbb-activity-context-interface>
				<sbb-activity-context-interface-name>
					org.mobicents.slee.examples.callcontrol.forwarding.CallForwardingSbbActivityContextInterface
				</sbb-activity-context-interface-name>
			</sbb-activity-context-interface>
		</sbb-classes>
		<address-profile-spec-alias-ref>
			CallControlProfile
		</address-profile-spec-alias-ref>
		
		
		<event event-direction="Receive" initial-event="True">
			<event-name>Invite</event-name>
			<event-type-ref>
					<event-type-name>javax.sip.message.Request.INVITE</event-type-name>
					<event-type-vendor>net.java.slee</event-type-vendor>
					<event-type-version>1.2</event-type-version>
			</event-type-ref>
			<initial-event-selector-method-name>
				callIDSelect
			</initial-event-selector-method-name>
		</event>

		
		<activity-context-attribute-alias>
			<attribute-alias-name>
				inviteFilteredByCallBlocking
			</attribute-alias-name>
			<sbb-activity-context-attribute-name>
				filteredByAncestor
			</sbb-activity-context-attribute-name>
		</activity-context-attribute-alias>
		<activity-context-attribute-alias>
			<attribute-alias-name>
				inviteFilteredByCallForwarding
			</attribute-alias-name>
			<sbb-activity-context-attribute-name>
				filteredByMe
			</sbb-activity-context-attribute-name>
		</activity-context-attribute-alias>
		
		<resource-adaptor-type-binding>
			<resource-adaptor-type-ref>
				<resource-adaptor-type-name>
					JAIN SIP
				</resource-adaptor-type-name>
				<resource-adaptor-type-vendor>
					javax.sip
				</resource-adaptor-type-vendor>
				<resource-adaptor-type-version>
					1.2
				</resource-adaptor-type-version>
			</resource-adaptor-type-ref>
			<activity-context-interface-factory-name>
				slee/resources/jainsip/1.2/acifactory
			</activity-context-interface-factory-name>
			<resource-adaptor-entity-binding>
				<resource-adaptor-object-name>
					slee/resources/jainsip/1.2/provider
				</resource-adaptor-object-name>
				<resource-adaptor-entity-link>
					SipRA
				</resource-adaptor-entity-link>
			</resource-adaptor-entity-binding>
		</resource-adaptor-type-binding>
	</sbb>
		]]>
		</programlisting>
		
	</section>
</section>	